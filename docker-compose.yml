services:
  # Redis 服务，与 CI 中的 services: redis: 一致
  redis:
    image: redis:6-alpine
    container_name: smartdownloader-redis
    volumes:
      - redis-data:/data # 将命名卷挂载到Redis的数据目录
    ports:
      - "6379:6379" # 将容器的6379端口映射到本机的6379端口
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 你的 FastAPI 应用，类似于 CI 中的主运行器
  app:
    container_name: smartdownloader-app
    tty: true # 保持前台进程运行，提高稳定性
    image: smartdownloader-app:latest # 为镜像指定一个明确的名称
    build:
      context: .
      dockerfile: Dockerfile
    command: uvicorn web.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/app # 将本地代码挂载到容器中，实现热重载
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy # 等待 Redis 健康后再启动
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND_URL=redis://redis:6379/0
      
  # Celery Worker 服务
  worker:
    container_name: smartdownloader-worker
    tty: true # 保持前台进程运行，提高稳定性
    image: smartdownloader-app:latest # 直接复用由app服务构建的镜像
    command: celery -A web.celery_app worker --loglevel=info --hostname=local-worker@%h
    volumes:
      - .:/app
    depends_on:
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND_URL=redis://redis:6379/0

  # 一个专门用于运行测试的服务，它模拟了CI环境
  test-runner:
    container_name: smartdownloader-test-runner
    image: smartdownloader-app:latest # 复用同一个应用镜像
    # `command` 会被 docker-compose run 覆盖，这里可以留空或设置默认
    command: ["echo", "Test runner ready. Use 'docker-compose run test-runner pytest' to run tests."]
    volumes:
      - .:/app
    depends_on:
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND_URL=redis://redis:6379/0

# 定义命名卷
volumes:
  redis-data:
    driver: local