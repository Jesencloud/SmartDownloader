# pyproject.toml

[project]
name = "smartdownloader"
version = "1.0.0"
description = "An intelligent tool for downloading videos and audio with AI subtitle generation."

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-html>=4.0.0",
    "pytest-playwright>=0.4.0",
]

[tool.ruff]
# 设置每行最大长度，与你的 .pylintrc 保持一致
line-length = 120

# 指定 Ruff 在格式化时要处理的文件或目录
src = ["."]

[tool.ruff.lint]
# 选择要启用的规则集。
# E: pycodestyle (Errors)
# F: Pyflakes
# W: pycodestyle (Warnings)
# I: isort (import sorting)
# PLW: Pylint Warnings (W1203 就在这里)
select = ["E", "F", "W", "I", "PLW"]

# 忽略某些规则。E501 (line-too-long) 由 ruff format 处理。
# E501: line-too-long (handled by ruff format)
# PLW1509: `preexec_fn` argument is unsafe when using threads
# PLW0602: Using global for a variable but no assignment is done
# W291: Trailing whitespace
ignore = ["E501", "PLW1509", "PLW0602", "W291"]

# 允许使用下划线开头的未使用变量（例如 `_` 或 `__`）
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# /Users/jiantai/Documents/script/SmartDownloader/pyproject.toml

[tool.pytest.ini_options]
# 在这里添加常用的 pytest 命令行参数
pythonpath = "."
markers = [
    "e2e: marks tests as end-to-end tests that require live services.",
    "integration: marks tests as integration tests that check component interactions.",
]

[tool.coverage.run]
# source: 明确指定哪些是你的源代码，覆盖率只会在这些文件上计算
source = [
    "web",
    "core",
    "subtitles.py",
    "downloader.py",
    "main.py",
    "config_manager.py",
    "utils.py"
    
]

# omit: 从覆盖率计算中排除的文件/目录
omit = [
    "tests/*",             # 关键：排除所有测试文件
    "web/celery_app.py",   # 示例：可以排除配置文件或启动文件
    "*/__init__.py",       # 示例：通常不需要测试 __init__.py
]

[tool.coverage.report]
# (可选) 设置覆盖率报告的行为
# show_missing = true   # 在终端报告中显示未覆盖的行号
# fail_under = 80       # 如果总覆盖率低于80%，测试将失败 (非常适合CI)

[tool.coverage.html]
# 指定HTML报告的输出目录
directory = "tests/htmlcov"
