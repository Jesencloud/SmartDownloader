# subtitles.py

import time
import re
from pathlib import Path
from typing import Optional, Dict

# 尝试导入AI相关的库
try:
    import whisper
    from deep_translator import GoogleTranslator
    AI_LIBRARIES_AVAILABLE = True
except ImportError:
    AI_LIBRARIES_AVAILABLE = False

class SubtitleProcessor:
    """
    负责所有与AI字幕生成相关的任务。
    【已更新】：支持通过代理进行翻译。
    """
    def __init__(self, download_folder: Path, proxy: Optional[str] = None):
        if not AI_LIBRARIES_AVAILABLE:
            raise ImportError("必要的AI库（openai-whisper 或 deep-translator）未安装。")
        
        self.download_folder = download_folder
        self.whisper_model = None
        
        # 【新】将代理字符串转换为 deep-translator 需要的字典格式
        proxy_dict: Optional[Dict[str, str]] = None
        if proxy:
            # 假设 http 和 https 都走同一个代理
            proxy_dict = {"http": proxy, "https": proxy}
        
        # 在初始化时传入代理
        self.translator = GoogleTranslator(source='en', target='zh-CN', proxies=proxy_dict)

    # ... a _check_for_existing_subs, _transcribe, _translate, _merge ...
    # (其余所有方法无需改动)
    def process_item(self, file_prefix: str, audio_source_path: Path) -> None:
        """处理单个项目AI字幕生成的完整流程。"""
        print("\n" + "-" * 25)
        print("  🧠 AI字幕生成流程启动...")
        
        if self._check_for_existing_subs(file_prefix):
            return

        en_srt_path = self._transcribe(audio_source_path)
        if en_srt_path:
            zh_srt_path = self._translate(en_srt_path)
            if zh_srt_path:
                self._merge(en_srt_path, zh_srt_path)

    def _check_for_existing_subs(self, file_prefix: str) -> bool:
        """检查是否已存在官方字幕。"""
        existing_subs = list(self.download_folder.glob(f"{file_prefix}*.srt"))
        if existing_subs:
            print(f"    ℹ️ 检测到已下载的官方字幕 ({[sub.name for sub in existing_subs]})，跳过AI生成。")
            return True
        return False
        
    def _transcribe(self, audio_path: Path) -> Optional[Path]:
        """使用 Whisper 进行语音转录。"""
        print(f"    🎤 [Whisper] 正在从 '{audio_path.name}' 转录英文语音，这可能需要一些时间...")
        try:
            if not self.whisper_model:
                print("    首次加载Whisper模型 (base.en)...")
                self.whisper_model = whisper.load_model("base.en")
            
            result = self.whisper_model.transcribe(str(audio_path), verbose=False, language='en')
            srt_path = audio_path.with_suffix('.en.srt')
            
            with open(srt_path, "w", encoding="utf-8") as f:
                for i, segment in enumerate(result['segments']):
                    start, end, text = segment['start'], segment['end'], segment['text']
                    start_time = f"{int(start//3600):02d}:{int(start%3600//60):02d}:{int(start%60):02d},{int(start*1000%1000):03d}"
                    end_time = f"{int(end//3600):02d}:{int(end%3600//60):02d}:{int(end%60):02d},{int(end*1000%1000):03d}"
                    f.write(f"{i + 1}\n{start_time} --> {end_time}\n{text.strip()}\n\n")
            
            print(f"    ✅ [Whisper] 英文SRT字幕已生成: {srt_path.name}")
            return srt_path
        except Exception as e:
            print(f"    ❌ [Whisper] 语音转录失败: {e}")
            return None

    def _translate(self, srt_path_in: Path) -> Optional[Path]:
        """使用 deep-translator 进行批量翻译。"""
        print(f"    ✍️ [Translator] 正在使用 deep-translator (Google) 翻译 '{srt_path_in.name}'...")
        srt_path_out = srt_path_in.with_suffix('.zh-CN.srt')
        try:
            with open(srt_path_in, 'r', encoding='utf-8') as f_in:
                content = f_in.read()

            text_blocks = [m.group(1) for m in re.finditer(r'\d+\n[\d:,->\s]+\n(.*?)\n\n', content, re.DOTALL)]
            delimiter = "\n<br>\n"
            full_text = delimiter.join(text.replace('\n', ' ') for text in text_blocks)
            translated_full_text = self.translator.translate(full_text)
            
            # 如果翻译结果为空，则可能出错了
            if not translated_full_text:
                raise ValueError("翻译服务返回了空结果。")

            translated_blocks = translated_full_text.split(delimiter.strip())

            if len(text_blocks) != len(translated_blocks):
                raise ValueError(f"翻译返回片段数({len(translated_blocks)})与原文({len(text_blocks)})不匹配。")

            it_translated = iter(translated_blocks)
            def replace_func(match): return next(it_translated).strip()
            new_content = re.sub(r'(\d+\n[\d:,->\s]+\n)(.+?)(\n\n)', lambda m: m.group(1) + replace_func(m.group(2)) + m.group(3), content, flags=re.DOTALL)
            
            with open(srt_path_out, 'w', encoding='utf-8') as f_out:
                f_out.write(new_content)

            print(f"    ✅ [Translator] 中文SRT字幕已生成: {srt_path_out.name}")
            return srt_path_out
        except Exception as e:
            print(f"    ❌ [Translator] 翻译失败: {e}")
            return None

    def _merge(self, en_srt_path: Path, zh_srt_path: Path) -> Optional[Path]:
        """合并中英文字幕。"""
        print(f"    🤝 [Merger] 正在合并字幕...")
        bilingual_srt_path = en_srt_path.with_suffix('.bilingual.srt')
        try:
            with open(en_srt_path, 'r', encoding='utf-8') as f: en_content = f.read()
            with open(zh_srt_path, 'r', encoding='utf-8') as f: zh_content = f.read()
            en_subs = {m.group(1): m.group(3).strip() for m in re.finditer(r'(\d+)\n([\d:,->\s]+)\n(.*?)\n\n', en_content, re.DOTALL)}
            zh_subs = {m.group(1): m.group(3).strip() for m in re.finditer(r'(\d+)\n([\d:,->\s]+)\n(.*?)\n\n', zh_content, re.DOTALL)}
            timestamps = {m.group(1): m.group(2).strip() for m in re.finditer(r'(\d+)\n([\d:,->\s]+\n)', en_content)}
            
            with open(bilingual_srt_path, 'w', encoding='utf-8') as f_out:
                for index, timestamp in timestamps.items():
                    f_out.write(f"{index}\n")
                    f_out.write(f"{timestamp}\n")
                    f_out.write(f"{zh_subs.get(index, '')}\n")
                    f_out.write(f"{en_subs.get(index, '')}\n\n")
            
            print(f"    ✅ [Merger] 双语SRT字幕已生成: {bilingual_srt_path.name}")
            return bilingual_srt_path
        except Exception as e:
            print(f"    ❌ [Merger] 字幕合并失败: {e}")
            return None