# .github/workflows/release.yaml
name: Create Release

on:
  push:
    tags:
      - 'v*.*.*' # 仅在推送 vX.X.X 格式的标签时触发

jobs:
  build-release:
    name: Build and Release
    # 此任务现在直接在推送标签时运行，不再重复测试
    runs-on: ubuntu-latest
    # 赋予创建Release的权限
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # 获取所有历史记录，以便能找到所有标签
          fetch-depth: 0

      # 新增步骤：验证与标签关联的commit message
      - name: Verify Commit Message for Release (验证提交信息)
        id: verify_commit
        run: |
          # 获取标签指向的commit的完整消息
          COMMIT_MESSAGE=$(git log -1 --pretty=%B ${{ github.ref }})

          # 检查commit message是否包含指定的发布短语
          if echo "$COMMIT_MESSAGE" | grep -q "chore(release): prepare for version"; then
            echo "✅ Commit message contains release phrase. Proceeding with release."
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ Not a release commit. This tag will not create a release."
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract release notes from CHANGELOG.md
        id: changelog
        # 仅在是发布标签时运行
        if: steps.verify_commit.outputs.is_release == 'true'
        run: |
          TAG=${{ github.ref_name }}
          VERSION=${TAG#v}
          NOTES=$(awk "/## \\[$VERSION\\]/{flag=1; next} /## \\[/{flag=0} flag" CHANGELOG.md | sed '/^$/N;/^\n$/D')
          NOTES="${NOTES//'%'/'%25'}"
          NOTES="${NOTES//$'\n'/'%0A'}"
          NOTES="${NOTES//$'\r'/'%0D'}"
          echo "notes=${NOTES}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        # 仅在是发布标签时运行
        if: steps.verify_commit.outputs.is_release == 'true'
        with:
          body: ${{ steps.changelog.outputs.notes }}
          name: Release ${{ github.ref_name }}
          prerelease: contains(github.ref_name, '-')